diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java
index d202f0a..d81a544 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java
@@ -220,11 +220,32 @@ private Job createJob() throws IOException {
       setupSSLConfig(job);
     }
 
+    if (inputOptions.getExclusionsFile() != null) {
+      addExclusionsFileToDistCache(job, new Path(inputOptions.getExclusionsFile()));
+    }
+
     inputOptions.appendToConf(job.getConfiguration());
     return job;
   }
 
   /**
+   * Add exclusions file to distributed cache.
+   *
+   * @param job - Job handle
+   * @param exclusionsFilePath - exclusion file path specified through options
+   * @throws IOException - If any
+   */
+  private void addExclusionsFileToDistCache(Job job,
+                                            Path exclusionsFilePath) throws IOException {
+    Configuration configuration = job.getConfiguration();
+    FileSystem localFS = FileSystem.getLocal(configuration);
+
+    configuration.set(DistCpConstants.CONF_LABEL_EXCLUSIONS_FILE, exclusionsFilePath.getName());
+
+    job.addCacheFile(exclusionsFilePath.toUri());
+  }
+
+  /**
    * Setup ssl configuration on the job configuration to enable hsftp access
    * from map job. Also copy the ssl configuration file to Distributed cache
    *
diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpConstants.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpConstants.java
index 7e71096..1fade00 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpConstants.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpConstants.java
@@ -54,6 +54,7 @@
   public static final String CONF_LABEL_OVERWRITE = "distcp.copy.overwrite";
   public static final String CONF_LABEL_APPEND = "distcp.copy.append";
   public static final String CONF_LABEL_BANDWIDTH_MB = "distcp.map.bandwidth.mb";
+	public static final String CONF_LABEL_EXCLUSIONS_FILE = "distcp.map.exclusions.file";
   
   public static final String CONF_LABEL_MAX_CHUNKS_TOLERABLE =
       "distcp.dynamic.max.chunks.tolerable";
diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptionSwitch.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptionSwitch.java
index d263f82..0d20055 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptionSwitch.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptionSwitch.java
@@ -167,7 +167,16 @@
    * Specify bandwidth per map in MB
    */
   BANDWIDTH(DistCpConstants.CONF_LABEL_BANDWIDTH_MB,
-      new Option("bandwidth", true, "Specify bandwidth per map in MB"));
+      new Option("bandwidth", true, "Specify bandwidth per map in MB")),
+
+	/**
+	 * Path containing a list of regex Patterns to be skipped during the
+	 * copy process.
+	 */
+	EXCLUSIONS(DistCpConstants.CONF_LABEL_EXCLUSIONS_FILE,
+			new Option("exclusions", true, "The path to a file containing a list of" +
+          " regular expressions for paths to be skipped during the copy."));
+
 
   public static final String PRESERVE_STATUS_DEFAULT = "-prbugpct";
   private final String confLabel;
diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptions.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptions.java
index 57d2fb7..950b24e 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptions.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpOptions.java
@@ -63,6 +63,8 @@
 
   private Path targetPath;
 
+	private String exclusionsFile;
+
   // targetPathExist is a derived field, it's initialized in the 
   // beginning of distcp.
   private boolean targetPathExists = true;
@@ -132,6 +134,7 @@ public DistCpOptions(DistCpOptions that) {
       this.sourcePaths = that.getSourcePaths();
       this.targetPath = that.getTargetPath();
       this.targetPathExists = that.getTargetPathExists();
+	    this.exclusionsFile = that.getExclusionsFile();
     }
   }
 
@@ -495,6 +498,24 @@ public boolean setTargetPathExists(boolean targetPathExists) {
     return this.targetPathExists = targetPathExists;
   }
 
+	/**
+	 * File path (hdfs:// or file://) that contains the list of Patterns
+	 * for paths to be excluded from the file copy.
+	 *
+	 * @return - Exclusions listing file path.
+	 */
+	public String getExclusionsFile() {
+		return exclusionsFile;
+	}
+
+	/**
+	 * Set exclusionsFile.
+	 * @param exclusionsFile The path to a list of patterns to exclude from copy.
+	 */
+	public void setExclusionsFile(String exclusionsFile) {
+		this.exclusionsFile = exclusionsFile;
+	}
+
   public void validate(DistCpOptionSwitch option, boolean value) {
 
     boolean syncFolder = (option == DistCpOptionSwitch.SYNC_FOLDERS ?
@@ -562,6 +583,8 @@ public void appendToConf(Configuration conf) {
         String.valueOf(mapBandwidth));
     DistCpOptionSwitch.addToConf(conf, DistCpOptionSwitch.PRESERVE_STATUS,
         DistCpUtils.packAttributes(preserveStatus));
+    if (exclusionsFile != null)
+	    DistCpOptionSwitch.addToConf(conf, DistCpOptionSwitch.EXCLUSIONS, exclusionsFile);
   }
 
   /**
@@ -583,8 +606,9 @@ public String toString() {
         ", sourcePaths=" + sourcePaths +
         ", targetPath=" + targetPath +
         ", targetPathExists=" + targetPathExists +
-        ", preserveRawXattrs=" + preserveRawXattrs +
-        '}';
+		    ", preserveRawXattrs=" + preserveRawXattrs +
+		    ", exclusionsFile='" + exclusionsFile + '\''+
+		    '}';
   }
 
   @Override
diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java
index 4bbc30d..a8696cc 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java
@@ -235,6 +235,11 @@ public static DistCpOptions parse(String args[]) throws IllegalArgumentException
               " option. Ignoring.");
     }
 
+    if (command.hasOption(DistCpOptionSwitch.EXCLUSIONS.getSwitch())) {
+      option.setExclusionsFile(getVal(command,
+          DistCpOptionSwitch.EXCLUSIONS.getSwitch()));
+    }
+
     return option;
   }
 
diff --git hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java
index ab57127..a46ee69 100644
--- hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java
+++ hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java
@@ -18,13 +18,23 @@
 
 package org.apache.hadoop.tools.mapred;
 
+import java.io.BufferedReader;
 import java.io.FileNotFoundException;
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Arrays;
+import java.util.ArrayList;
 import java.util.EnumSet;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
+import com.google.common.annotations.VisibleForTesting;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -58,10 +68,12 @@
     COPY,         // Number of files received by the mapper for copy.
     SKIP,         // Number of files skipped.
     FAIL,         // Number of files that failed to be copied.
+    EXCLUDED,     // Number of files excluded.
     BYTESCOPIED,  // Number of bytes actually copied by the copy-mapper, total.
     BYTESEXPECTED,// Number of bytes expected to be copied.
     BYTESFAILED,  // Number of bytes that failed to be copied.
     BYTESSKIPPED, // Number of bytes that were skipped from copy.
+    BYTESEXCLUDED,// Number of bytes that were excluded from copy.
   }
 
   /**
@@ -71,6 +83,7 @@
     SKIP,         // Skip copying the file since it's already in the target FS
     APPEND,       // Only need to append new data to the file in the target FS 
     OVERWRITE,    // Overwrite the whole file
+    EXCLUDE,      // Skip copying the file because it matched an exclusion pattern
   }
 
   private static Log LOG = LogFactory.getLog(CopyMapper.class);
@@ -83,6 +96,7 @@
   private boolean overWrite = false;
   private boolean append = false;
   private EnumSet<FileAttribute> preserve = EnumSet.noneOf(FileAttribute.class);
+  private List<Pattern> exclusionPatterns = null;
 
   private FileSystem targetFS = null;
   private Path    targetWorkPath = null;
@@ -118,6 +132,39 @@ public void setup(Context context) throws IOException, InterruptedException {
     if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) != null) {
       initializeSSLConf(context);
     }
+
+    if (conf.get(DistCpConstants.CONF_LABEL_EXCLUSIONS_FILE, null) != null) {
+      initializeExclusionPatterns(context);
+    }
+  }
+
+  @VisibleForTesting
+  void setExclusionPatterns(List<Pattern> exclusionPatterns) {
+    this.exclusionPatterns = exclusionPatterns;
+  }
+
+  /**
+   * Initialize Exclusions Patterns
+   *
+   * @throws IOException - If any
+   */
+  private void initializeExclusionPatterns(Context context) throws IOException {
+    LOG.info("Initialze Exclusion Patterns");
+
+    Path[] cacheFiles = context.getLocalCacheFiles();
+
+    String exclusionsFile = conf.get(DistCpConstants.CONF_LABEL_EXCLUSIONS_FILE);
+    Path exclusionsPath = findCacheFile(cacheFiles, exclusionsFile);
+
+    exclusionPatterns = new ArrayList<Pattern>();
+
+    InputStream is = new FileInputStream(new File(exclusionsPath.getName()));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+    String line;
+    while ((line = reader.readLine()) != null) {
+      exclusionPatterns.add(Pattern.compile(line));
+    }
+    reader.close();
   }
 
   /**
@@ -203,6 +250,12 @@ public void map(Text relPath, CopyListingFileStatus sourceFileStatus,
     final boolean preserveRawXattrs = context.getConfiguration().getBoolean(
         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);
 
+    if (canExclude(sourceFileStatus)) {
+      LOG.info("Excluding " + sourceFileStatus.getPath().toString() + " from copy.");
+      updateExcludeCounters(context, sourceFileStatus);
+      return;
+    }
+
     final String description = "Copying " + sourcePath + " to " + target;
     context.setStatus(description);
 
@@ -260,6 +313,18 @@ public void map(Text relPath, CopyListingFileStatus sourceFileStatus,
     }
   }
 
+  private boolean canExclude(CopyListingFileStatus sourceFileStatus) {
+    if (exclusionPatterns != null) {
+      for (Pattern pattern : exclusionPatterns) {
+        Matcher matcher = pattern.matcher(sourceFileStatus.getPath().toString());
+        if (matcher.find()) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
   private String getFileType(FileStatus fileStatus) {
     return fileStatus == null ? "N/A" : (fileStatus.isDirectory() ? "dir" : "file");
   }
@@ -306,6 +371,13 @@ private static void updateSkipCounters(Context context,
 
   }
 
+  private static void updateExcludeCounters(Context context,
+                                            FileStatus sourceFile) {
+    incrementCounter(context, Counter.EXCLUDED, 1);
+    incrementCounter(context, Counter.BYTESEXCLUDED, sourceFile.getLen());
+
+  }
+
   private void handleFailures(IOException exception,
                                      FileStatus sourceFileStatus, Path target,
                                      Context context) throws IOException, InterruptedException {
diff --git hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/TestOptionsParser.java hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/TestOptionsParser.java
index 30fb25b..9302e7d 100644
--- hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/TestOptionsParser.java
+++ hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/TestOptionsParser.java
@@ -304,6 +304,21 @@ public void testParseMaps() {
   }
 
   @Test
+  public void testExclusionsOption() {
+    DistCpOptions options = OptionsParser.parse(new String[] {
+        "hdfs://localhost:8020/source/first",
+        "hdfs://localhost:8020/target/"});
+    Assert.assertNull(options.getExclusionsFile());
+
+    options = OptionsParser.parse(new String[] {
+        "-exclusions",
+        "/tmp/exclusions.txt",
+        "hdfs://localhost:8020/source/first",
+        "hdfs://localhost:8020/target/"});
+    Assert.assertEquals(options.getExclusionsFile(), "/tmp/exclusions.txt");
+  }
+
+  @Test
   public void testSourceListing() {
     DistCpOptions options = OptionsParser.parse(new String[] {
         "-f",
@@ -358,7 +373,7 @@ public void testToString() {
     String val = "DistCpOptions{atomicCommit=false, syncFolder=false, deleteMissing=false, " +
         "ignoreFailures=false, maxMaps=20, sslConfigurationFile='null', copyStrategy='uniformsize', " +
         "sourceFileListing=abc, sourcePaths=null, targetPath=xyz, targetPathExists=true, " +
-        "preserveRawXattrs=false}";
+        "preserveRawXattrs=false, exclusionsFile='null'}";
     Assert.assertEquals(val, option.toString());
     Assert.assertNotSame(DistCpOptionSwitch.ATOMIC_COMMIT.toString(),
         DistCpOptionSwitch.ATOMIC_COMMIT.name());
diff --git hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/mapred/TestCopyMapper.java hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/mapred/TestCopyMapper.java
index 7639d23..870bfec 100644
--- hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/mapred/TestCopyMapper.java
+++ hadoop-tools/hadoop-distcp/src/test/java/org/apache/hadoop/tools/mapred/TestCopyMapper.java
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Random;
+import java.util.regex.Pattern;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -1029,4 +1030,73 @@ private void testPreserveUserGroupImpl(boolean preserve){
       e.printStackTrace();
     }
   }
+
+  @Test(timeout=40000)
+  public void testCopyExclusions() {
+    try {
+      deleteState();
+      createSourceData();
+
+      UserGroupInformation tmpUser = UserGroupInformation.createRemoteUser("guest");
+
+      final CopyMapper copyMapper = new CopyMapper();
+
+      final StubContext stubContext =  tmpUser.
+          doAs(new PrivilegedAction<StubContext>() {
+            @Override
+            public StubContext run() {
+              try {
+                return new StubContext(getConfiguration(), null, 0);
+              } catch (Exception e) {
+                LOG.error("Exception encountered", e);
+                throw new RuntimeException(e);
+              }
+            }
+          });
+
+      final Mapper<Text, CopyListingFileStatus, Text, Text>.Context context =
+          stubContext.getContext();
+
+      touchFile(SOURCE_PATH + "/src/file");
+      mkdirs(TARGET_PATH);
+      cluster.getFileSystem().setPermission(new Path(TARGET_PATH), new FsPermission((short)511));
+
+
+      final FileSystem tmpFS = tmpUser.doAs(new PrivilegedAction<FileSystem>() {
+        @Override
+        public FileSystem run() {
+          try {
+            return FileSystem.get(configuration);
+          } catch (IOException e) {
+            LOG.error("Exception encountered", e);
+            Assert.fail("Test failed: " + e.getMessage());
+            throw new RuntimeException("Test ought to fail here");
+          }
+        }
+      });
+
+      tmpUser.doAs(new PrivilegedAction<Integer>() {
+        @Override
+        public Integer run() {
+          try {
+            List<Pattern> exclusionPatterns = new ArrayList<Pattern>();
+            exclusionPatterns.add(Pattern.compile("file"));
+            copyMapper.setup(context);
+            copyMapper.setExclusionPatterns(exclusionPatterns);
+            copyMapper.map(new Text("/src/file"),
+                new CopyListingFileStatus(tmpFS.getFileStatus(
+                    new Path(SOURCE_PATH + "/src/file"))),
+                context);
+            Assert.assertEquals(stubContext.getWriter().values().size(), 0);
+          } catch (Exception e) {
+            throw new RuntimeException(e);
+          }
+          return null;
+        }
+      });
+    } catch (Exception e) {
+      LOG.error("Exception encountered", e);
+      Assert.fail("Test failed: " + e.getMessage());
+    }
+  }
 }
